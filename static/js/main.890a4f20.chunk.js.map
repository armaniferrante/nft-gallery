{"version":3,"sources":["idls/nft-swap.ts","context/Anchor.tsx","utils/tokens.ts","components/Me.tsx","components/Match.tsx","App.tsx","reportWebVitals.ts","index.tsx","context/Wallet.tsx"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","kind","fields","errors","code","_AnchorContext","createContext","AnchorProvider","props","wallet","useAnchorWallet","provider","useMemo","connection","Connection","Provider","preflightCommitment","commitment","nftSwap","programId","PublicKey","Program","value","children","useAnchor","ctx","useContext","Error","getOwnedTokenAccounts","publicKey","a","filters","getOwnedAccountsFilters","getProgramAccounts","TOKEN_PROGRAM_ID","resp","accs","map","pubkey","account","data","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","mint","ata","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","Me","address","useParams","console","log","ownedTokens","useOwnedTokens","Grid","container","spacing","result","filter","tokenInfo","undefined","metadata","index","NftGridItem","arweaveAsync","useArweave","item","xs","sm","md","alt","style","width","src","image","display","justifyContent","flexDirection","CircularProgress","marginLeft","marginRight","height","Match","history","createHashHistory","App","className","CssBaseline","Wallet","Anchor","basename","Header","exact","path","component","useStyles","makeStyles","searchBar","border","backgroundColor","borderRadius","outline","paddingLeft","paddingRight","transition","homeButton","cursor","classes","useState","searchText","setSearchText","onClick","push","go","onKeyDown","e","key","target","onChange","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","network","WalletAdapterNetwork","Mainnet","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","autoConnect","ownerAddr","useAsync","readOwnedTokens","setOwnedTokens","ownedTokensResolve","tokens","forEach","t","nft","resolve","TOKEN_CACHE","set","toString","getMetadata","metadataPubkeys","anchor","rpc","getMultipleAccounts","m","decodeMetadata","METADATA_CACHE","tAddr","get","readMetadata","readArweave","uri","reject","fetch","json","catch","ARWEAVE_CACHE","OWNED_TOKENS_CACHE","require","Map","TOKEN_METADATA_PROGRAM_ID","findProgramAddress","Buffer","from","toBuffer"],"mappings":"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","file":"static/js/main.890a4f20.chunk.js","sourcesContent":["export type NftSwap = {\n  version: \"0.0.0\";\n  name: \"nft_swap\";\n  instructions: [\n    {\n      name: \"advertise\";\n      accounts: [\n        {\n          name: \"advert\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"nft\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"owner\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"swapSigner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"price\";\n          type: \"u64\";\n        },\n        {\n          name: \"bump\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"propose\";\n      accounts: [\n        {\n          name: \"proposal\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertA\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"advertB\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenReceiver\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"authority\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"bump\";\n          type: \"u8\";\n        }\n      ];\n    },\n    {\n      name: \"accept\";\n      accounts: [\n        {\n          name: \"proposal\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advert\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenReceiver\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"authority\";\n          isMut: false;\n          isSigner: true;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"execute\";\n      accounts: [\n        {\n          name: \"proposal\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"rentExemptionRecipient\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertA\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertB\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"nftA\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"nftB\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertATokenB\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertBTokenA\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"swapSigner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"advertAAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"advertBAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"advertisement\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"nft\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"bump\";\n            type: \"u8\";\n          },\n          {\n            name: \"price\";\n            type: \"u64\";\n          },\n          {\n            name: \"authority\";\n            type: \"publicKey\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"proposal\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"advertA\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"advertB\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"advertATokenB\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"advertBTokenA\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"rentExemptionRecipient\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"bump\";\n            type: \"u8\";\n          }\n        ];\n      };\n    }\n  ];\n  errors: [\n    {\n      code: 300;\n      name: \"Unknown\";\n    }\n  ];\n};\n\nexport const IDL: NftSwap = {\n  version: \"0.0.0\",\n  name: \"nft_swap\",\n  instructions: [\n    {\n      name: \"advertise\",\n      accounts: [\n        {\n          name: \"advert\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"nft\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"owner\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"swapSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"price\",\n          type: \"u64\",\n        },\n        {\n          name: \"bump\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"propose\",\n      accounts: [\n        {\n          name: \"proposal\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertA\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"advertB\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenReceiver\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"authority\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"bump\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"accept\",\n      accounts: [\n        {\n          name: \"proposal\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advert\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenReceiver\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"authority\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"execute\",\n      accounts: [\n        {\n          name: \"proposal\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rentExemptionRecipient\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertA\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertB\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"nftA\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"nftB\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertATokenB\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertBTokenA\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"swapSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"advertAAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"advertBAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"advertisement\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"nft\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"bump\",\n            type: \"u8\",\n          },\n          {\n            name: \"price\",\n            type: \"u64\",\n          },\n          {\n            name: \"authority\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"proposal\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"advertA\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"advertB\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"advertATokenB\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"advertBTokenA\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"rentExemptionRecipient\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"bump\",\n            type: \"u8\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 300,\n      name: \"Unknown\",\n    },\n  ],\n};\n","import { useMemo, createContext, useContext } from \"react\";\nimport { Program, Provider } from \"@project-serum/anchor\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { NftSwap, IDL } from \"../idls/nft-swap\";\nimport { PublicKey, Connection, ConfirmOptions } from \"@solana/web3.js\";\n\ntype AnchorContext = {\n  provider: Provider;\n  nftSwap: Program<NftSwap> | undefined;\n};\n\nconst _AnchorContext = createContext<AnchorContext | null>(null);\n\nexport default function AnchorProvider(props: any) {\n  const wallet = useAnchorWallet();\n  const provider = useMemo(() => {\n    const connection = new Connection(\n      //\t\t\t'https://solana-api.projectserum.com',\n      \"https://api.mainnet-beta.solana.com\",\n      \"recent\"\n    );\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    // @ts-ignore\n    const provider = new Provider(connection, wallet, opts);\n    return provider;\n  }, [wallet]);\n  const { nftSwap } = useMemo(() => {\n    const programId = new PublicKey(\n      \"2joi9QJe3GN55vkRhUtMNU9QN4zKmBJDH8Y2zJ8d4gs4\"\n    );\n    const nftSwap = new Program<NftSwap>(IDL, programId, provider);\n    return { nftSwap, provider };\n  }, [provider]);\n  return (\n    <_AnchorContext.Provider\n      value={{\n        provider,\n        nftSwap,\n      }}\n    >\n      {props.children}\n    </_AnchorContext.Provider>\n  );\n}\n\nexport function useAnchor() {\n  const ctx = useContext(_AnchorContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      //      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import { useParams } from \"react-router-dom\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport { useOwnedTokens, useArweave, TokenInfo } from \"../context/Wallet\";\n\nexport default function Me() {\n  const { address } = useParams<{ address: string | undefined }>();\n\tconsole.log('using address', address);\n  const ownedTokens = useOwnedTokens(address);\n  return (\n    <Grid container spacing={1}>\n      {ownedTokens &&\n        ownedTokens.result &&\n        ownedTokens.result\n          .filter((tokenInfo) => tokenInfo.metadata !== undefined)\n          .map((tokenInfo: any, index: number) => (\n            <NftGridItem tokenInfo={tokenInfo} key={index} />\n          ))}\n    </Grid>\n  );\n}\n\nfunction NftGridItem({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  const arweaveAsync = useArweave(tokenInfo.metadata);\n  return !arweaveAsync.result ? (\n    <div\n      style={{\n        width: \"33%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <CircularProgress\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          width: \"50px\",\n          height: \"50px\",\n        }}\n      />\n    </div>\n  ) : (\n    <Grid item xs={2} sm={4} md={4}>\n      <img\n        alt={arweaveAsync.result.name}\n        style={{ width: \"100%\" }}\n        src={arweaveAsync.result.image}\n      />\n    </Grid>\n  );\n}\n","export default function Match() {\n  return <div>MATCH</div>;\n}\n","import { useState } from \"react\";\nimport WalletProvider from \"./context/Wallet\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { createHashHistory } from \"history\";\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\nimport Me from \"./components/Me\";\nimport Match from \"./components/Match\";\nimport AnchorProvider from \"./context/Anchor\";\nimport \"./App.css\";\n\nconst history = createHashHistory();\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <WalletProvider>\n        <AnchorProvider>\n          <Router basename={\"/\"}>\n            <div>\n              <Header />\n              <Switch>\n                 <Route exact path=\"/me\" component={Me} />\n                <Route exact path=\"/wallet/:address\" component={Me} />\n                <Route exact path=\"/match\" component={Match} />\n              </Switch>\n            </div>\n          </Router>\n        </AnchorProvider>\n      </WalletProvider>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(() => ({\n  searchBar: {\n    \"&:focus\": {\n      width: \"600px\",\n    },\n    border: `1pt solid #ccc`,\n    backgroundColor: \"rgb(249 249 249)\",\n    width: \"400px\",\n    borderRadius: \"8px\",\n    outline: \"none\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n    height: \"30px\",\n    transition: \"width .3s\",\n  },\n  homeButton: {\n    \"&:hover\": {\n      cursor: \"pointer\",\n    },\n  },\n}));\n\nfunction Header() {\n  const classes = useStyles();\n  const [searchText, setSearchText] = useState(\"\");\n  const onKeyDown = (e: any) => {\n    if (e.key === \"Enter\") {\n      history.push(`/wallet/${e.target.value}`);\n\t\t\thistory.go(0);\n    }\n  };\n  const onHomeClick = () => {\n    history.push(\"/me\");\n\t\thistory.go(0);\n  };\n  return (\n    <div\n      style={{\n        paddingLeft: \"8px\",\n        paddingRight: \"8px\",\n        backgroundColor: \"rgb(105 85 235)\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <div style={{ display: \"flex\" }}>\n        <div\n          className={classes.homeButton}\n          onClick={onHomeClick}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <img\n            style={{ height: \"45px\" }}\n            src=\"https://dao.projectserum.com/static/media/dark-horizontal-combined-rainbow.inline.4abc2aec.svg\"\n          />\n        </div>\n        <div\n          style={{\n            marginLeft: \"8px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <input\n            value={searchText}\n            onKeyDown={onKeyDown}\n            onChange={(e) => setSearchText(e.target.value)}\n            placeholder=\"Search...\"\n            className={classes.searchBar}\n          />\n        </div>\n      </div>\n      {/*\n\t\t\t<div>\n\t\t\t\t<Button>\n\t\t\t\t\t<Link to=\"/me\">\n\t\t\t\t\t\tMe\n\t\t\t\t\t</Link>\n\t\t\t\t</Button>\n\t\t\t\t<Button>\n\t\t\t\t\t<Link to=\"/match\">\n\t\t\t\t\t\tMatch\n\t\t\t\t\t</Link>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t\t*/}\n\t\t\t{/*\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <WalletMultiButton\n          style={{\n            height: \"35px\",\n            backgroundColor: \"#f35757\",\n            borderRadius: 10,\n          }}\n        />\n      </div>\n\t\t\t*/}\n    </div>\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useMemo } from \"react\";\nimport { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getOwnedTokenAccounts } from \"../utils/tokens\";\nimport { useAnchor } from \"./Anchor\";\nimport { metadata } from \"@project-serum/token\";\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nexport default function Wallet(props: any) {\n  const network = WalletAdapterNetwork.Mainnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSolletWallet({ network }),\n    ],\n    [network]\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{props.children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport function useOwnedTokens(\n  ownerAddr?: string\n): UseAsyncReturn<Array<TokenInfo>> {\n  const { provider } = useAnchor();\n  return useAsync<Array<TokenInfo>>(async () => {\n\t\tconst owner = ownerAddr ? new PublicKey(ownerAddr) : provider.wallet ? provider.wallet.publicKey : undefined;\n    if (owner === undefined) {\n      return [];\n    }\n    const ts = readOwnedTokens(owner);\n\n    // Perform the fetch if needed.\n    if (!ts) {\n      setOwnedTokens(\n        owner,\n        new Promise<Array<PublicKey>>(async (ownedTokensResolve) => {\n          // Fetch and cache all tokens for this user.\n          const tokens = await getOwnedTokenAccounts(\n            provider.connection,\n\t\t\t\t\t\t// @ts-ignore\n            owner\n          );\n          tokens.forEach((t: any) => {\n            setToken(t.publicKey, new Promise((resolve) => resolve(t)));\n          });\n\n          // Calculate all the metadata.\n          const metadataPubkeys = await Promise.all(\n            // @ts-ignore\n            tokens.map((t) => getMetadata(t.account.mint))\n          );\n\n          // Fetch and cache all metadata accounts.\n          const accs = await Promise.all(\n            (\n              await anchor.utils.rpc.getMultipleAccounts(\n                provider.connection,\n                metadataPubkeys\n              )\n            )\n              .filter((m) => m !== null)\n              .map((m) => ({\n                ...m,\n                account: metadata.decodeMetadata(m!.account.data),\n              }))\n          );\n          accs.forEach((metadata) => {\n            setMetadata(\n              //@ts-ignore\n              metadata.account.mint,\n              //@ts-ignore\n              new Promise<Metadata>((resolve) => resolve(metadata))\n            );\n          });\n\n          // Done.\n          // @ts-ignore\n          ownedTokensResolve(tokens.map((t) => t.publicKey));\n        })\n      );\n    }\n\n    // Use the cache to construct the result.\n    const ownedTokens = await readOwnedTokens(owner);\n    const result: Array<TokenInfo> = await Promise.all(\n      ownedTokens!.map(async (tAddr) => {\n        const data = await readToken(tAddr);\n        const metadata = await readMetadata(data!.account.mint);\n        return {\n          data: data as Token,\n          metadata: metadata as Metadata,\n        };\n      })\n    );\n\t\tconsole.log('returning result', result);\n    return result;\n  }, [provider, ownerAddr]);\n}\n\nexport function useArweave(md: Metadata): UseAsyncReturn<Arweave> {\n  return useAsync<Arweave>(async () => {\n    const data = readArweave(md.account.data.uri);\n    if (!data) {\n      setArweave(\n        md.account.uri,\n        new Promise<Arweave>((resolve, reject) => {\n          fetch(md.account.data.uri)\n            .then((resp) => resp.json())\n            .then(resolve)\n            .catch(reject);\n        })\n      );\n    }\n    return await readArweave(md.account.uri);\n  }, [md]);\n}\nexport function readArweave(uri: string): Promise<Arweave> | undefined {\n  return ARWEAVE_CACHE.get(uri);\n}\nexport function setArweave(uri: string, nft: Promise<Arweave>) {\n  ARWEAVE_CACHE.set(uri, nft);\n}\n\nexport function readOwnedTokens(\n  owner: PublicKey\n): Promise<Array<PublicKey>> | undefined {\n  return OWNED_TOKENS_CACHE.get(owner.toString());\n}\n\nexport function setOwnedTokens(owner: PublicKey, t: Promise<Array<PublicKey>>) {\n  OWNED_TOKENS_CACHE.set(owner.toString(), t);\n}\n\nexport function readToken(mint: PublicKey): Promise<Token> | undefined {\n  return TOKEN_CACHE.get(mint.toString());\n}\n\nexport function setToken(mint: PublicKey, nft: Promise<Token>) {\n  TOKEN_CACHE.set(mint.toString(), nft);\n}\n\nexport function readMetadata(mint: PublicKey): Promise<Metadata> | undefined {\n  return METADATA_CACHE.get(mint.toString());\n}\n\nexport function setMetadata(mint: PublicKey, md: Promise<Metadata>) {\n  METADATA_CACHE.set(mint.toString(), md);\n}\n\n// Maps user wallet to array of tokens it owns.\nconst OWNED_TOKENS_CACHE = new Map<string, Promise<Array<PublicKey>>>();\n\n// Maps token address to token data.\nconst TOKEN_CACHE = new Map<string, Promise<Token>>();\n\n// Maps token address to token metadata.\nconst METADATA_CACHE = new Map<string, Promise<Metadata>>();\n\n// Maps metadata uri to arweave data.\nconst ARWEAVE_CACHE = new Map<string, Promise<Arweave>>();\n\nexport type Token = { publicKey: PublicKey; account: any };\nexport type Metadata = { publicKey: PublicKey; account: any };\nexport type TokenInfo = { data: Token; metadata: Metadata };\nexport type Arweave = any;\n\nconst TOKEN_METADATA_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nasync function getMetadata(mint: PublicKey): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n}\n"],"sourceRoot":""}